#!/usr/bin/env python3
# Copyright (C) 2011 Gregor Richards
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

import argparse
import collections
import os
import struct
import subprocess
import sys
import tempfile

import config_pb2

# parse command-line arguments

def parse_args():
    parser = argparse.ArgumentParser(description='Run a command in a UML sandbox.')

    parser.add_argument(
        '--verbose', '-v', action='store_true',
        help='verbose mode: show debugging output')

    group = parser.add_argument_group('mount options')
    group.add_argument(
        '--base-mounts', action='store_true',
        help='use base set of mount points')
    group.add_argument(
        '--mount', metavar='DIR', action='append', default=[],
        help='share a directory, read-only')
    group.add_argument(
        '--mount-write', metavar='DIR', action='append', default=[],
        help='share a directory, read-write')
    group.add_argument(
        '--translate', nargs=2, metavar=('GUEST', 'HOST'), action='append', default=[],
        help='share a directory with a different name, read-only')
    group.add_argument(
        '--translate-write', nargs=2, metavar=('GUEST', 'HOST'), action='append', default=[],
        help='share a directory with a different name, read-write')

    group = parser.add_argument_group('execution options')
    group.add_argument(
        '--cwd', metavar='DIR',
        help='set cwd in guest to DIR')
    group.add_argument(
        '--env', metavar='VAR=VALUE', action='append', default=[],
        help='set VAR to VALUE in the guest environment')
    group.add_argument(
        '--no-stdin', action='store_true',
        help='detach from stdin')
    group.add_argument(
        '--root', action='store_true',
        help='run as root within UML (negates security benefits)')

    group = parser.add_argument_group('communication options')
    group.add_argument(
        '--local', metavar='H:G', action='append', default=[],
        help='forward local TCP port H on host to port G on guest')
    group.add_argument(
        '--remote', metavar='G:A:P', action='append', default=[],
        help='forward remote TCP port G on guest to address A:P')
    group.add_argument(
        '--x11', action='store_true',
        help='enable X11 forwarding')

    group = parser.add_argument_group('execution limits')
    group.add_argument(
        '--timeout', metavar='T', type=int, default=0,
        help='set a timeout of T seconds')
    group.add_argument(
        '--memory', metavar='M', default='256M',
        help='set a memory limit of M (default 256M)')

    group = parser.add_argument_group('paths')
    group.add_argument(
        '--linux', metavar='KERNEL',
        help='use the given UML kernel binary')
    group.add_argument(
        '--mudem', metavar='MUDEM',
        help='use the given mudem binary for port forwarding')
    group.add_argument(
        '--initrd', metavar='INITRD',
        help='use the given initrd file to boot from')

    parser.add_argument(
        'cmd', metavar='X', nargs='+',
        help='command and optional arguments to execute')

    return parser.parse_args(), parser

# build the UML configuration and command

def main():
    args, parser = parse_args()
    finder = Finder()

    # locate the necessary binaries

    linux = finder.locate(args.linux, 'umlbox-linux', 'linux', '/usr/bin/linux')
    if linux is None:
        parser.error('could not find UML kernel; set --linux?')
    if args.verbose:
        print("Found UML kernel " + linux)

    initrd = finder.locate(args.initrd, 'umlbox-initrd.gz')
    if initrd is None:
        parser.error('could not find umlbox-initrd.gz; set --initrd?')
    if args.verbose:
        print("Found initrd " + initrd)

    mudem, mudem_host, mudem_guest = None, [], []
    for spec in args.local:
        parts = spec.split(":")
        if len(parts) != 2:
            parser.error('expected --local H:G, got --local "{}"'.format(spec))
        mudem_host.append('tcp4-listen:{}'.format(parts[0]))
        mudem_guest.append('tcp4:127.0.0.1:{}'.format(parts[1]))
    for spec in args.remote:
        parts = spec.split(":")
        if len(parts) != 3:
            parser.error('expected --remote G:A:P, got --remote "{}"'.format(spec))
        mudem_host.append('tcp4:{}:{}'.format(parts[1], parts[2]))
        mudem_guest.append('tcp4-listen:{}'.format(parts[0]))
    if args.x11:
        mudem_host.append('unix:/tmp/.X11-unix/X0')
        mudem_guest.append('tcp4-listen:6000')
    if mudem_host:
        mudem = finder.locate(args.mudem, 'umlbox-mudem')
        if mudem is None:
            parser.error('could not find umlbox-mudem; set --mudem?')

    if not ("HOME" in os.environ): # required by UML
        os.environ["HOME"] = "/tmp"

    # prepare the config file

    cfg = config_pb2.Config()

    if not os.isatty(1): cfg.tty_raw.append('/tty1')
    if args.verbose and not os.isatty(2): cfg.tty_raw.append('/console')

    mounts = {
        '/tmp': config_pb2.Mount(target='/tmp', source='tmpfs', fstype='tmpfs'),
        '/proc': config_pb2.Mount(target='/proc', source='proc', fstype='proc'),
        '/sys': config_pb2.Mount(target='/sys', source='sysfs', fstype='sysfs'),
    }
    if args.base_mounts:
        for m in ('/usr', '/bin', '/sbin', '/lib', '/lib32', '/lib64', '/etc/alternatives', '/dev'):
            if os.path.isdir(m):
                mounts[m] = host_mount(target=m, host=m, ro=True)
    for ro, specs in ((True, args.mount), (False, args.mount_write)):
        for spec in specs:
            mdir = os.path.abspath(spec)
            mounts[mdir] = host_mount(target=mdir, host=mdir, ro=ro)
    for ro, specs in ((True, args.translate), (False, args.translate_write)):
        for guest, host in specs:
            mdir = os.path.abspath(host)
            mounts[guest] = host_mount(target=guest, host=host, ro=ro)
    for mdir in sorted(mounts.keys(), key=lambda m: (len(m), m)):
        cfg.mount.extend([mounts[mdir]])

    cfg.run.add(cmd='/sbin/ip', arg=['addr', 'add', '127.0.0.1/8', 'dev', 'lo'], output='/console')
    cfg.run.add(cmd='/sbin/ip', arg=['link', 'set', 'lo', 'up'], output='/console')

    if mudem_guest:
        cfg.tty_raw.append('/tty2')
        cfg.run.add(
            daemon=True,
            cmd=mudem, arg=['1'] + mudem_guest,
            input='/tty2', output='/tty2', error='/tty1')

    cmd = cfg.run.add(
        cmd=args.cmd[0], arg=args.cmd[1:],
        cwd=args.cwd if args.cwd is not None else os.getcwd(),
        input='/null' if args.no_stdin else '/tty1', output='/tty1',
        cat_output=not os.isatty(1),
        user=not args.root, uid=os.getuid(), gid=os.getgid(),
        timeout=args.timeout)
    for spec in args.env:
        parts = spec.split('=', 1)
        if len(parts) != 2:
            parser.error('expected --env VAR=VALUE, got --env "{}"'.format(spec))
        cmd.env.add(key=parts[0], value=parts[1])

    if args.verbose:
        print('Configuration:\n{}'.format(cfg))
        sys.stdout.flush()

    cfg = cfg.SerializeToString()
    cfg = struct.pack('=LL', 0xdeadbeef, len(cfg)) + cfg
    if len(cfg) % 512 != 0:  # ubd file must be padded to block boundary
        cfg += b'\0' * (512 - len(cfg) % 512)

    # execute UML

    cmd_fd = os.dup(1)
    debug_fd = 2 if args.verbose else subprocess.DEVNULL
    pass_fds = [cmd_fd]

    cmd_con = '{},fd:{}'.format('null' if args.no_stdin else 'fd:0', cmd_fd)
    mudem_con = 'null'
    debug_con = 'null,{}'.format('fd:2' if args.verbose else 'null')

    mudem_proc = None
    if mudem_host:
        mudem_proc = subprocess.Popen([mudem, '0'] + mudem_host, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        mudem_out, mudem_in = mudem_proc.stdout.fileno(), mudem_proc.stdin.fileno()
        mudem_con = 'fd:{},fd:{}'.format(mudem_out, mudem_in)
        pass_fds.extend([mudem_out, mudem_in])

    with tempfile.NamedTemporaryFile(prefix='umlbox-', suffix='.pb') as cfgf:
        cfgf.write(cfg)
        cfgf.flush()

        cmd = [
            linux, 'initrd=' + initrd,
            'mem=' + args.memory,
            'con1=' + cmd_con, 'con2=' + mudem_con, 'con=' + debug_con,
            'ubda=' + cfgf.name,
        ]
        if args.verbose:
            print('Command: {}\n'.format(cmd))

        subprocess.run(cmd, stdout=debug_fd, stderr=debug_fd, pass_fds=pass_fds)

    os.close(cmd_fd)
    if mudem_proc is not None:
        mudem_proc.terminate()

# utilities

class Finder:
    def __init__(self):
        self._cwd = os.path.abspath('.')
        self._bin = os.path.abspath(os.path.dirname(sys.argv[0]))

    def locate(self, arg, *names):
        if arg is not None:
            return arg
        for name in names:
            path = os.path.join(self._cwd, name)
            if os.path.exists(path):
                return path
            path = os.path.join(self._bin, name)
            if os.path.exists(path):
                return path
        return None

def host_mount(target, host, ro):
    if not host.endswith('/'): host += '/'
    return config_pb2.Mount(target=target, source='none', fstype='hostfs', data=host, ro=ro, nosuid=True)

if __name__ == '__main__':
    main()
